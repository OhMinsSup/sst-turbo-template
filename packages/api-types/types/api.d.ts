/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/v1/auth/logout": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 로그아웃 */
    post: operations["AuthController_logout"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/auth/signIn": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 이메일 회원가입 */
    post: operations["AuthController_signIn"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/auth/signUp": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 이메일 회원가입 */
    post: operations["AuthController_signUp"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/auth/token": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 토큰 재발급 */
    post: operations["AuthController_token"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/hello": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["AppController_getHello"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/users/me": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 로그인 사용자 정보 */
    get: operations["UsersController_me"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    AuthTokenResponseDto: {
      /**
       * Format: date-time
       * @description 만료일
       */
      expiresAt: string;
      /**
       * @description 만료시간
       * @example 30m
       */
      expiresIn: string;
      /** @description Refresh 토큰 */
      refreshToken: string;
      /**
       * @description 토큰
       * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
       */
      token: string;
      /**
       * @description 토큰타입
       * @example Bearer
       */
      tokenType: string;
    };
    Boolean: Record<string, never>;
    ErrorResponseDto: {
      /** @description HttpExceptionResponseDto,ValidationExceptionResponseDto 두가지가 올수있습니다. */
      error: Record<string, never>;
      /**
       * @description 결과 코드
       * @enum {number}
       */
      resultCode:
        | 1
        | -1
        | 1001
        | 1002
        | 1003
        | 1004
        | 1005
        | 4001
        | 4002
        | 6001
        | 6002
        | 6003
        | 6004
        | 6005
        | 7000
        | 7001;
      /**
       * @description 상태코드
       * @enum {number}
       */
      statusCode:
        | 100
        | 101
        | 102
        | 103
        | 200
        | 201
        | 202
        | 203
        | 204
        | 205
        | 206
        | 300
        | 301
        | 302
        | 303
        | 304
        | 307
        | 308
        | 400
        | 401
        | 402
        | 403
        | 404
        | 405
        | 406
        | 407
        | 408
        | 409
        | 410
        | 411
        | 412
        | 413
        | 414
        | 415
        | 416
        | 417
        | 418
        | 421
        | 422
        | 424
        | 428
        | 429
        | 500
        | 501
        | 502
        | 503
        | 504
        | 505;
    };
    HttpExceptionResponseDto: {
      /**
       * @description 에러명
       * @enum {string}
       */
      error:
        | "BadRequestException"
        | "ForbiddenException"
        | "NotFoundException"
        | "UnauthorizedException"
        | "NotAcceptableException"
        | "RequestTimeoutException"
        | "ConflictException"
        | "GoneException"
        | "HttpVersionNotSupportedException"
        | "PayloadTooLargeException"
        | "UnsupportedMediaTypeException"
        | "UnprocessableEntityException"
        | "InternalServerErrorException"
        | "NotImplementedException"
        | "ImATeapotException"
        | "MethodNotAllowedException"
        | "BadGatewayException"
        | "ServiceUnavailableException"
        | "GatewayTimeoutException"
        | "PreconditionFailedException"
        | "ThrottlerException";
      /** @description 에러메시지 */
      message: string;
    };
    RoleResponseDto: {
      /**
       * 기호
       * @description 역할 기호
       * @example USER
       */
      symbol: string;
    };
    SignInDTO: {
      /**
       * Email
       * @description 이메일 주소
       * @example example@example.com
       */
      email: string;
      /**
       * Password
       * @description The password of the user
       */
      password: string;
      /**
       * Provider
       * @description 인증 방식
       * @example email
       * @enum {string}
       */
      provider: "email";
    };
    SignUpDTO: {
      /**
       * Email
       * @description 이메일 주소
       * @example example@example.com
       */
      email: string;
      /**
       * Password
       * @description The password of the user
       */
      password: string;
      /**
       * Provider
       * @description 인증 방식
       * @example email
       * @enum {string}
       */
      provider: "email";
      /**
       * Usernaem
       * @description 유저의 이름
       * @example John Doe
       */
      username?: string;
    };
    SuccessResponseDto: {
      /** @description object 또는 array 형식 또는 프리미티 형식. */
      data: Record<string, never>;
      /**
       * @description 결과 코드
       * @enum {number}
       */
      resultCode:
        | 1
        | -1
        | 1001
        | 1002
        | 1003
        | 1004
        | 1005
        | 4001
        | 4002
        | 6001
        | 6002
        | 6003
        | 6004
        | 6005
        | 7000
        | 7001;
      /**
       * @description 상태코드
       * @enum {number}
       */
      statusCode:
        | 100
        | 101
        | 102
        | 103
        | 200
        | 201
        | 202
        | 203
        | 204
        | 205
        | 206
        | 300
        | 301
        | 302
        | 303
        | 304
        | 307
        | 308
        | 400
        | 401
        | 402
        | 403
        | 404
        | 405
        | 406
        | 407
        | 408
        | 409
        | 410
        | 411
        | 412
        | 413
        | 414
        | 415
        | 416
        | 417
        | 418
        | 421
        | 422
        | 424
        | 428
        | 429
        | 500
        | 501
        | 502
        | 503
        | 504
        | 505;
    };
    TokenDTO: {
      /**
       * 재발급 토큰
       * @description 재발급 토큰
       */
      refreshToken: string;
    };
    UserResponseDto: {
      /**
       * 이메일
       * @description 사용자 이메일
       * @example test@naver.com
       */
      email: string;
      /**
       * 이메일 확인 일시
       * Format: date-time
       * @description 이메일 확인 일시
       */
      emailConfirmedAt?: string;
      /**
       * ID
       * @description 사용자 ID
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      id: string;
      /**
       * 정지 여부
       * @description 정지 여부
       * @example false
       */
      isSuspended: boolean;
      /** @description 역할 */
      Role: components["schemas"]["RoleResponseDto"];
      /**
       * 이름
       * @description 사용자 이름
       * @example 홍길동
       */
      username: string;
    };
    ValidationExceptionResponseDto: {
      /**
       * @description 에러명
       * @enum {string}
       */
      error:
        | "BadRequestException"
        | "ForbiddenException"
        | "NotFoundException"
        | "UnauthorizedException"
        | "NotAcceptableException"
        | "RequestTimeoutException"
        | "ConflictException"
        | "GoneException"
        | "HttpVersionNotSupportedException"
        | "PayloadTooLargeException"
        | "UnsupportedMediaTypeException"
        | "UnprocessableEntityException"
        | "InternalServerErrorException"
        | "NotImplementedException"
        | "ImATeapotException"
        | "MethodNotAllowedException"
        | "BadGatewayException"
        | "ServiceUnavailableException"
        | "GatewayTimeoutException"
        | "PreconditionFailedException"
        | "ThrottlerException";
      /** @description 에러메시지 */
      message: string;
      /**
       * @description 필드 : [에러정보] 형식의 에러정보가 담긴 객체입니다.
       * @example {
       *       "fieldName": [
       *         "errorinfoOfString"
       *       ]
       *     }
       */
      validationErrorInfo: Record<string, never>;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  AuthController_logout: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      204: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SuccessResponseDto"] & {
            data?: components["schemas"]["Boolean"];
          };
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponseDto"] & {
            error?: components["schemas"]["HttpExceptionResponseDto"];
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponseDto"] & {
            error?: components["schemas"]["HttpExceptionResponseDto"];
          };
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponseDto"] & {
            error?: components["schemas"]["HttpExceptionResponseDto"];
          };
        };
      };
    };
  };
  AuthController_signIn: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description 로그인 API */
    requestBody: {
      content: {
        "application/json": components["schemas"]["SignInDTO"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SuccessResponseDto"] & {
            data?: components["schemas"]["AuthTokenResponseDto"];
          };
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponseDto"] & {
            error?:
              | components["schemas"]["ValidationExceptionResponseDto"]
              | components["schemas"]["HttpExceptionResponseDto"];
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponseDto"] & {
            error?: components["schemas"]["HttpExceptionResponseDto"];
          };
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponseDto"] & {
            error?: components["schemas"]["HttpExceptionResponseDto"];
          };
        };
      };
    };
  };
  AuthController_signUp: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description 회원가입 API */
    requestBody: {
      content: {
        "application/json": components["schemas"]["SignUpDTO"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SuccessResponseDto"] & {
            data?: components["schemas"]["AuthTokenResponseDto"];
          };
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponseDto"] & {
            error?:
              | components["schemas"]["ValidationExceptionResponseDto"]
              | components["schemas"]["HttpExceptionResponseDto"];
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponseDto"] & {
            error?: components["schemas"]["HttpExceptionResponseDto"];
          };
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponseDto"] & {
            error?: components["schemas"]["HttpExceptionResponseDto"];
          };
        };
      };
    };
  };
  AuthController_token: {
    parameters: {
      query: {
        /**
         * @description 검증 타입
         * @example refresh_token
         */
        grantType: "refresh_token";
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description 토큰 재발급 API */
    requestBody: {
      content: {
        "application/json": components["schemas"]["TokenDTO"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SuccessResponseDto"] & {
            data?: components["schemas"]["AuthTokenResponseDto"];
          };
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponseDto"] & {
            error?:
              | components["schemas"]["ValidationExceptionResponseDto"]
              | components["schemas"]["HttpExceptionResponseDto"];
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponseDto"] & {
            error?: components["schemas"]["HttpExceptionResponseDto"];
          };
        };
      };
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponseDto"] & {
            error?: components["schemas"]["HttpExceptionResponseDto"];
          };
        };
      };
    };
  };
  AppController_getHello: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UsersController_me: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SuccessResponseDto"] & {
            data?: components["schemas"]["UserResponseDto"];
          };
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponseDto"] & {
            error?: components["schemas"]["HttpExceptionResponseDto"];
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponseDto"] & {
            error?: components["schemas"]["HttpExceptionResponseDto"];
          };
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponseDto"] & {
            error?: components["schemas"]["HttpExceptionResponseDto"];
          };
        };
      };
    };
  };
}
