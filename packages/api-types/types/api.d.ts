/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/v1": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["AppController_getHello"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/auth/refresh": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** 토큰 갱신 */
    patch: operations["AuthController_refresh"];
    trace?: never;
  };
  "/api/v1/auth/signin": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 이메일 로그인 */
    post: operations["AuthController_signin"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/auth/signout": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 로그아웃 */
    post: operations["AuthController_signout"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/auth/signup": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 이메일 회원가입 */
    post: operations["AuthController_signup"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/auth/verify": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 토큰 검증 */
    post: operations["AuthController_verifyToken"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/users/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 아이디로 사용자 정보 조회 */
    get: operations["UsersController_byUserId"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/users/me": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 로그인 사용자 정보 */
    get: operations["UsersController_me"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    AuthResponseDto: {
      /** @description 유저 이메일 */
      email: string;
      /** @description 유저 아이디 */
      id: string;
      /** @description 유저 이미지 */
      image: string | null;
      /** @description 유저 이름 */
      name: string;
      /** @description 유저 토큰 */
      tokens: components["schemas"]["TokensDto"];
    };
    Boolean: Record<string, never>;
    ErrorResponseDto: {
      /** @description HttpExceptionResponseDto,ValidationExceptionResponseDto 두가지가 올수있습니다. */
      error: Record<string, never>;
      /**
       * @description 결과 코드
       * @enum {number}
       */
      resultCode:
        | 1
        | -1
        | 1001
        | 1002
        | 1003
        | 1004
        | 1005
        | 4001
        | 4002
        | 6001
        | 6002
        | 6003
        | 7000
        | 7001;
      /**
       * @description 상태코드
       * @enum {number}
       */
      statusCode:
        | 100
        | 101
        | 102
        | 103
        | 200
        | 201
        | 202
        | 203
        | 204
        | 205
        | 206
        | 300
        | 301
        | 302
        | 303
        | 304
        | 307
        | 308
        | 400
        | 401
        | 402
        | 403
        | 404
        | 405
        | 406
        | 407
        | 408
        | 409
        | 410
        | 411
        | 412
        | 413
        | 414
        | 415
        | 416
        | 417
        | 418
        | 421
        | 422
        | 424
        | 428
        | 429
        | 500
        | 501
        | 502
        | 503
        | 504
        | 505;
    };
    HttpExceptionResponseDto: {
      /**
       * @description 에러명
       * @enum {string}
       */
      error:
        | "BadRequestException"
        | "ForbiddenException"
        | "NotFoundException"
        | "UnauthorizedException"
        | "NotAcceptableException"
        | "RequestTimeoutException"
        | "ConflictException"
        | "GoneException"
        | "HttpVersionNotSupportedException"
        | "PayloadTooLargeException"
        | "UnsupportedMediaTypeException"
        | "UnprocessableEntityException"
        | "InternalServerErrorException"
        | "NotImplementedException"
        | "ImATeapotException"
        | "MethodNotAllowedException"
        | "BadGatewayException"
        | "ServiceUnavailableException"
        | "GatewayTimeoutException"
        | "PreconditionFailedException"
        | "ThrottlerException";
      /** @description 에러메시지 */
      message: string;
    };
    RefreshTokenDTO: {
      /**
       * Refresh Token
       * @description The refresh token of the user
       * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
       */
      refreshToken: string;
    };
    SigninDTO: {
      /**
       * Email
       * @description The email of the user
       * @example example@example.com
       */
      email: string;
      /**
       * Password
       * @description The password of the user
       */
      password: string;
    };
    SignoutDTO: {
      /**
       * Access Token
       * @description The access token of the user
       * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
       */
      accessToken: string;
    };
    SignupDTO: {
      /**
       * Email
       * @description The email of the user
       * @example example@example.com
       */
      email: string;
      /**
       * Image URL
       * @description The URL of the user's avatar
       * @example https://example.com/avatar.png
       */
      image?: string;
      /**
       * Name
       * @description The name of the user
       * @example John Doe
       */
      name?: string;
      /**
       * Password
       * @description The password of the user
       */
      password: string;
    };
    SuccessResponseDto: {
      /** @description object 또는 array 형식 또는 프리미티 형식. */
      data: Record<string, never>;
      /**
       * @description 결과 코드
       * @enum {number}
       */
      resultCode:
        | 1
        | -1
        | 1001
        | 1002
        | 1003
        | 1004
        | 1005
        | 4001
        | 4002
        | 6001
        | 6002
        | 6003
        | 7000
        | 7001;
      /**
       * @description 상태코드
       * @enum {number}
       */
      statusCode:
        | 100
        | 101
        | 102
        | 103
        | 200
        | 201
        | 202
        | 203
        | 204
        | 205
        | 206
        | 300
        | 301
        | 302
        | 303
        | 304
        | 307
        | 308
        | 400
        | 401
        | 402
        | 403
        | 404
        | 405
        | 406
        | 407
        | 408
        | 409
        | 410
        | 411
        | 412
        | 413
        | 414
        | 415
        | 416
        | 417
        | 418
        | 421
        | 422
        | 424
        | 428
        | 429
        | 500
        | 501
        | 502
        | 503
        | 504
        | 505;
    };
    TokenDto: {
      /**
       * Format: date-time
       * @description 만료일
       */
      expiresAt: string;
      /**
       * @description 토큰
       * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
       */
      token: string;
    };
    TokensDto: {
      /** @description 인증 토큰 */
      accessToken: components["schemas"]["TokenDto"];
      /** @description 갱신 토큰 */
      refreshToken: components["schemas"]["TokenDto"];
    };
    UserExternalResponseDto: {
      /**
       * Format: date-time
       * @description 사용자 삭제 시간
       */
      deletedAt: string | null;
      /** @description 사용자 이메일 */
      email: string;
      /**
       * Format: date-time
       * @description 사용자 이메일 인증 여부
       */
      emailVerified: string | null;
      /** @description 사용자 아이디 */
      id: string;
      /** @description 사용자 이미지 */
      image: string | null;
      /** @description 사용자 계정 정지 여부 */
      isSuspended: boolean;
      /**
       * Format: date-time
       * @description 사용자 마지막 활동 시간
       */
      lastActiveAt: string | null;
      /** @description 사용자 이름 */
      name: string;
      /** @description 사용자 프로필 */
      UserProfile: components["schemas"]["UserProfileDto"];
      /** @description 사용자 설정 */
      UserSettings: components["schemas"]["UserSettingsDto"];
    };
    UserProfileDto: {
      /** @description 사용자 자기 소개 */
      bio: string | null;
      /** @description 사용자 웹사이트 */
      website: string | null;
    };
    UserSettingsDto: {
      /** @description 사용자 개인 정보 설정 */
      privacySettings: boolean;
    };
    ValidationExceptionResponseDto: {
      /**
       * @description 에러명
       * @enum {string}
       */
      error:
        | "BadRequestException"
        | "ForbiddenException"
        | "NotFoundException"
        | "UnauthorizedException"
        | "NotAcceptableException"
        | "RequestTimeoutException"
        | "ConflictException"
        | "GoneException"
        | "HttpVersionNotSupportedException"
        | "PayloadTooLargeException"
        | "UnsupportedMediaTypeException"
        | "UnprocessableEntityException"
        | "InternalServerErrorException"
        | "NotImplementedException"
        | "ImATeapotException"
        | "MethodNotAllowedException"
        | "BadGatewayException"
        | "ServiceUnavailableException"
        | "GatewayTimeoutException"
        | "PreconditionFailedException"
        | "ThrottlerException";
      /** @description 에러메시지 */
      message: string;
      /**
       * @description 필드 : [에러정보] 형식의 에러정보가 담긴 객체입니다.
       * @example {
       *       "fieldName": [
       *         "errorinfoOfString"
       *       ]
       *     }
       */
      validationErrorInfo: Record<string, never>;
    };
    VerifyTokenDTO: {
      /**
       * Token
       * @description The token to verify
       * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
       */
      token: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  AppController_getHello: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AuthController_refresh: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description 토큰 갱신 API */
    requestBody: {
      content: {
        "application/json": components["schemas"]["RefreshTokenDTO"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SuccessResponseDto"] & {
            data?: components["schemas"]["AuthResponseDto"];
          };
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponseDto"] & {
            error?:
              | components["schemas"]["ValidationExceptionResponseDto"]
              | components["schemas"]["HttpExceptionResponseDto"];
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponseDto"] & {
            error?: components["schemas"]["HttpExceptionResponseDto"];
          };
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponseDto"] & {
            error?: components["schemas"]["HttpExceptionResponseDto"];
          };
        };
      };
    };
  };
  AuthController_signin: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description 로그인 API */
    requestBody: {
      content: {
        "application/json": components["schemas"]["SigninDTO"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SuccessResponseDto"] & {
            data?: components["schemas"]["AuthResponseDto"];
          };
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponseDto"] & {
            error?:
              | components["schemas"]["ValidationExceptionResponseDto"]
              | components["schemas"]["HttpExceptionResponseDto"];
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponseDto"] & {
            error?: components["schemas"]["HttpExceptionResponseDto"];
          };
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponseDto"] & {
            error?: components["schemas"]["HttpExceptionResponseDto"];
          };
        };
      };
    };
  };
  AuthController_signout: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description 로그아웃 API */
    requestBody: {
      content: {
        "application/json": components["schemas"]["SignoutDTO"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SuccessResponseDto"] & {
            data?: components["schemas"]["Boolean"];
          };
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponseDto"] & {
            error?:
              | components["schemas"]["ValidationExceptionResponseDto"]
              | components["schemas"]["HttpExceptionResponseDto"];
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponseDto"] & {
            error?: components["schemas"]["HttpExceptionResponseDto"];
          };
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponseDto"] & {
            error?: components["schemas"]["HttpExceptionResponseDto"];
          };
        };
      };
    };
  };
  AuthController_signup: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description 회원가입 API */
    requestBody: {
      content: {
        "application/json": components["schemas"]["SignupDTO"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SuccessResponseDto"] & {
            data?: components["schemas"]["AuthResponseDto"];
          };
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponseDto"] & {
            error?:
              | components["schemas"]["ValidationExceptionResponseDto"]
              | components["schemas"]["HttpExceptionResponseDto"];
          };
        };
      };
    };
  };
  AuthController_verifyToken: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description 토큰 검증 API */
    requestBody: {
      content: {
        "application/json": components["schemas"]["VerifyTokenDTO"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SuccessResponseDto"] & {
            data?: components["schemas"]["Boolean"];
          };
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponseDto"] & {
            error?:
              | components["schemas"]["ValidationExceptionResponseDto"]
              | components["schemas"]["HttpExceptionResponseDto"];
          };
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponseDto"] & {
            error?: components["schemas"]["HttpExceptionResponseDto"];
          };
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponseDto"] & {
            error?: components["schemas"]["HttpExceptionResponseDto"];
          };
        };
      };
    };
  };
  UsersController_byUserId: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SuccessResponseDto"] & {
            data?: components["schemas"]["UserExternalResponseDto"];
          };
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponseDto"] & {
            error?: components["schemas"]["HttpExceptionResponseDto"];
          };
        };
      };
    };
  };
  UsersController_me: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SuccessResponseDto"] & {
            data?: components["schemas"]["UserExternalResponseDto"];
          };
        };
      };
    };
  };
}
