// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                    String         @id @default(cuid())
  email                 String         @unique // 이메일
  emailVerified         DateTime? // true: 이메일 인증 완료, false: 이메일 인증 대기
  name                  String // 사용자 이름
  image                 String? // 프로필 이미지 URL
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  deletedAt             DateTime? // 삭제 시간
  lastActiveAt          DateTime? // 마지막 활동 시간
  isSuspended           Boolean        @default(false) // true: 정지, false: 활성 
  Password              Password?
  UserProfile           UserProfile?
  UserSettings          UserSettings?
  Account               Account[]
  Token                 Token[]
  Post                  Post[]
  SenderNotifications   Notification[] @relation("sender")
  ReceiverNotifications Notification[] @relation("receiver")

  @@map(name: "users")
}

model Password {
  hash   String //  비밀번호 해시
  salt   String // 비밀번호 솔트
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique

  @@map(name: "passwords")
}

model UserProfile {
  bio     String? // default: null, 자기소개
  website String? // default: null, 웹사이트
  User    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String  @unique

  @@map("user_profiles")
}

model UserSettings {
  privacySettings Boolean @default(false) // true: private, false: public
  User            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String  @unique

  @@map("user_settings")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String?
  sessionState      String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Token {
  id        String   @id @default(cuid())
  type      String // RefreshToken
  userId    String // 사용자 ID
  expires   DateTime // 만료 시간
  token     String? // RefreshToken인 경우 해당 refresh token과 쌍을 이룬 access token 값
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tokens")
}

model Post {
  id           String         @id @default(cuid())
  authorId     String // 작성자 ID
  text         String // 글 내용
  createdAt    DateTime       @default(now()) // 작성 시간
  updatedAt    DateTime       @updatedAt // 수정 시간
  Author       User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  Notification Notification[]

  @@map("posts")
}

model Notification {
  id             String   @id @default(cuid())
  read           Boolean  @default(false) // true: 읽음, false: 안읽음
  type           String   @default("ADMIN") // ADMIN: 시스템 알림, LIKE: 좋아요, REPLY: 댓글, FOLLOW: 팔로우, REPOST: 리포스트, QUOTE: 인용 리포스트 
  message        String // 알림 메시지
  isPublic       Boolean  @default(false) // true: 공개, false: 비공개
  senderUserId   String // 보낸 사용자 ID
  receiverUserId String? // 받는 사용자 ID
  postId         String? // 글 ID
  createdAt      DateTime @default(now()) // 작성 시간
  updatedAt      DateTime @updatedAt // 수정 시간
  SenderUser     User     @relation("sender", fields: [senderUserId], references: [id], onDelete: Cascade)
  ReceiverUser   User?    @relation("receiver", fields: [receiverUserId], references: [id], onDelete: Cascade)
  Post           Post?    @relation(fields: [postId], references: [id])

  @@index([receiverUserId])
  @@map("notifications")
}
